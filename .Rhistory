#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
ação <- 'CSNA3.SA'
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', ação)
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## tidying data
# PETR4.SA <- data.frame(PETR4.SA)
# PETR4.SA$Data <- rownames(PETR4.SA)
# PETR4.SA <- na.omit(PETR4.SA)
# BVSP <- data.frame(BVSP)
# BVSP$Data <- rownames(BVSP)
# BVSP <- na.omit(BVSP)
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(ação))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(ação))
## downloading historical series
x <- getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(tickers[2]))
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
cat("\014") ## limpa console
gc() ## limpa memória do PC
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
cat("\014") ## limpa console
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
ação <- 'CSNA3.SA'
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', ação)
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
## downloading historical series
# getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## tidying data
# PETR4.SA <- data.frame(PETR4.SA)
# PETR4.SA$Data <- rownames(PETR4.SA)
# PETR4.SA <- na.omit(PETR4.SA)
# BVSP <- data.frame(BVSP)
# BVSP$Data <- rownames(BVSP)
# BVSP <- na.omit(BVSP)
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")[2]))
benchmark_ret <- as.data.frame(monthlyReturn(getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")[1]))
## calculating ratios
sharpe <- function(mean, interest, stdev){
(mean - interest) / stdev
}
benchmark_mean <- mean(benchmark_ret$monthly.returns)
benchmark_variance <- var(benchmark_ret$monthly.returns)
benchmark_stdev <- sd(benchmark_ret$monthly.returns)
benchmark_sharpe <- sharpe(benchmark_mean, juros, benchmark_stdev)
stock_mean <- mean(stock_ret$monthly.returns)
stock_variance <- var(stock_ret$monthly.returns)
stock_stdev <- sd(stock_ret$monthly.returns)
stock_sharpe <- sharpe(stock_mean, juros, stock_stdev)
benchmark_vec <- benchmark_ret[1:nrow(stock_ret),]
covar <- cov(benchmark_vec, stock_ret$monthly.returns)
Beta <- covar / benchmark_variance
Alpha <- (stock_mean - juros - Beta * (benchmark_mean - juros)) * 100
#### Results ####
tickers[2:length(tickers)]
benchmark_sharpe # ratio of average return in excess of risk-free rate
stock_sharpe # ratio of average return in excess of risk-free rate
Beta # volatility of a stock compared to the benchmark index
Alpha # excess returns above benchmark
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## tidying data
# PETR4.SA <- data.frame(PETR4.SA)
# PETR4.SA$Data <- rownames(PETR4.SA)
# PETR4.SA <- na.omit(PETR4.SA)
# BVSP <- data.frame(BVSP)
# BVSP$Data <- rownames(BVSP)
# BVSP <- na.omit(BVSP)
ls()
ação <- c('CSNA3.SA')
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(ação))
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(as.character(ação)))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
ação <- getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")[2]
ação <- getSymbols(ação, from = startDate, to = endDate, src = "yahoo")[2]
ação <- getSymbols(ação, from = startDate, to = endDate, src = "yahoo")
ação <- c('CSNA3.SA')
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
ação <- getSymbols(ação, from = startDate, to = endDate, src = "yahoo")
ação <- NA
ação <- getSymbols(ação, from = startDate, to = endDate, src = "yahoo")
ação <- c('CSNA3.SA')
ação <- getSymbols(ação, from = startDate, to = endDate, src = "yahoo")
ação <-
rm(list=-ls(c(BVSP, tickers[2])))
ação <-
rm(list=!ls(c(BVSP, tickers[2])))
rm(list = ls()[grep("^tmp", ls())])
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
#### limpeza ####
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(CSNA3.SA))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
## calculating ratios
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
sharpe <- function(mean, interest, stdev){
(mean - interest) / stdev
}
benchmark_mean <- mean(benchmark_ret$monthly.returns)
benchmark_variance <- var(benchmark_ret$monthly.returns)
benchmark_stdev <- sd(benchmark_ret$monthly.returns)
benchmark_sharpe <- sharpe(benchmark_mean, juros, benchmark_stdev)
stock_mean <- mean(stock_ret$monthly.returns)
stock_variance <- var(stock_ret$monthly.returns)
stock_stdev <- sd(stock_ret$monthly.returns)
stock_sharpe <- sharpe(stock_mean, juros, stock_stdev)
benchmark_vec <- benchmark_ret[1:nrow(stock_ret),]
covar <- cov(benchmark_vec, stock_ret$monthly.returns)
Beta <- covar / benchmark_variance
Alpha <- (stock_mean - juros - Beta * (benchmark_mean - juros)) * 100
#### Results ####
tickers[2:length(tickers)]
benchmark_sharpe # ratio of average return in excess of risk-free rate
stock_sharpe # ratio of average return in excess of risk-free rate
Beta # volatility of a stock compared to the benchmark index
Alpha # excess returns above benchmark
rm(list = !c(tickers, benchmark_sharpe, stock_sharpe, Beta, Alpha))
rm(list != c(tickers, benchmark_sharpe, stock_sharpe, Beta, Alpha))
rm(list != c("tickers", "benchmark_sharpe", "stock_sharpe", "Beta", "Alpha"))
rm(list = c("tickers", "benchmark_sharpe", "stock_sharpe", "Beta", "Alpha"))
#### limpeza ####
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(CSNA3.SA))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
## calculating ratios
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
sharpe <- function(mean, interest, stdev){
(mean - interest) / stdev
}
benchmark_mean <- mean(benchmark_ret$monthly.returns)
benchmark_variance <- var(benchmark_ret$monthly.returns)
benchmark_stdev <- sd(benchmark_ret$monthly.returns)
benchmark_sharpe <- sharpe(benchmark_mean, juros, benchmark_stdev)
stock_mean <- mean(stock_ret$monthly.returns)
stock_variance <- var(stock_ret$monthly.returns)
stock_stdev <- sd(stock_ret$monthly.returns)
stock_sharpe <- sharpe(stock_mean, juros, stock_stdev)
benchmark_vec <- benchmark_ret[1:nrow(stock_ret),]
covar <- cov(benchmark_vec, stock_ret$monthly.returns)
Beta <- covar / benchmark_variance
Alpha <- (stock_mean - juros - Beta * (benchmark_mean - juros)) * 100
rm(list != c("tickers", "benchmark_sharpe", "stock_sharpe", "Beta", "Alpha"))
gc()
#### limpeza ####
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(CSNA3.SA))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
## calculating ratios
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
sharpe <- function(mean, interest, stdev){
(mean - interest) / stdev
}
benchmark_mean <- mean(benchmark_ret$monthly.returns)
benchmark_variance <- var(benchmark_ret$monthly.returns)
benchmark_stdev <- sd(benchmark_ret$monthly.returns)
benchmark_sharpe <- sharpe(benchmark_mean, juros, benchmark_stdev)
stock_mean <- mean(stock_ret$monthly.returns)
stock_variance <- var(stock_ret$monthly.returns)
stock_stdev <- sd(stock_ret$monthly.returns)
stock_sharpe <- sharpe(stock_mean, juros, stock_stdev)
benchmark_vec <- benchmark_ret[1:nrow(stock_ret),]
covar <- cov(benchmark_vec, stock_ret$monthly.returns)
Beta <- covar / benchmark_variance
Alpha <- (stock_mean - juros - Beta * (benchmark_mean - juros)) * 100
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Results ####
tickers[2:length(tickers)]
benchmark_sharpe # ratio of average return in excess of risk-free rate
stock_sharpe # ratio of average return in excess of risk-free rate
Beta # volatility of a stock compared to the benchmark index
Alpha # excess returns above benchmark
#### limpeza ####
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(CSNA3.SA))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
## calculating ratios
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
sharpe <- function(mean, interest, stdev){
(mean - interest) / stdev
}
benchmark_mean <- mean(benchmark_ret$monthly.returns)
benchmark_variance <- var(benchmark_ret$monthly.returns)
benchmark_stdev <- sd(benchmark_ret$monthly.returns)
benchmark_sharpe <- sharpe(benchmark_mean, juros, benchmark_stdev)
stock_mean <- mean(stock_ret$monthly.returns)
stock_variance <- var(stock_ret$monthly.returns)
stock_stdev <- sd(stock_ret$monthly.returns)
stock_sharpe <- sharpe(stock_mean, juros, stock_stdev)
benchmark_vec <- benchmark_ret[1:nrow(stock_ret),]
covar <- cov(benchmark_vec, stock_ret$monthly.returns)
Beta <- covar / benchmark_variance
Alpha <- (stock_mean - juros - Beta * (benchmark_mean - juros)) * 100
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Results ####
tickers[2:length(tickers)]
benchmark_sharpe # ratio of average return in excess of risk-free rate
stock_sharpe # ratio of average return in excess of risk-free rate
Beta # volatility of a stock compared to the benchmark index
Alpha # excess returns above benchmark
#### limpeza ####
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(CSNA3.SA))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
## calculating ratios
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
sharpe <- function(mean, interest, stdev){
(mean - interest) / stdev
}
benchmark_mean <- mean(benchmark_ret$monthly.returns)
benchmark_variance <- var(benchmark_ret$monthly.returns)
benchmark_stdev <- sd(benchmark_ret$monthly.returns)
benchmark_sharpe <- sharpe(benchmark_mean, juros, benchmark_stdev)
stock_mean <- mean(stock_ret$monthly.returns)
stock_variance <- var(stock_ret$monthly.returns)
stock_stdev <- sd(stock_ret$monthly.returns)
stock_sharpe <- sharpe(stock_mean, juros, stock_stdev)
benchmark_vec <- benchmark_ret[1:nrow(stock_ret),]
covar <- cov(benchmark_vec, stock_ret$monthly.returns)
Beta <- covar / benchmark_variance
Alpha <- (stock_mean - juros - Beta * (benchmark_mean - juros)) * 100
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Results ####
tickers[2:length(tickers)]
benchmark_sharpe # ratio of average return in excess of risk-free rate
stock_sharpe # ratio of average return in excess of risk-free rate
Beta # volatility of a stock compared to the benchmark index
Alpha # excess returns above benchmark
#### limpeza ####
rm(list=ls()) ## limpa enviroment
dev.off(dev.list()["RStudioGD"]) ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(CSNA3.SA))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
## calculating ratios
juros <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 1, as = "xts"))[1,1]/100
sharpe <- function(mean, interest, stdev){
(mean - interest) / stdev
}
benchmark_mean <- mean(benchmark_ret$monthly.returns)
benchmark_variance <- var(benchmark_ret$monthly.returns)
benchmark_stdev <- sd(benchmark_ret$monthly.returns)
benchmark_sharpe <- sharpe(benchmark_mean, juros, benchmark_stdev)
stock_mean <- mean(stock_ret$monthly.returns)
stock_variance <- var(stock_ret$monthly.returns)
stock_stdev <- sd(stock_ret$monthly.returns)
stock_sharpe <- sharpe(stock_mean, juros, stock_stdev)
benchmark_vec <- benchmark_ret[1:nrow(stock_ret),]
covar <- cov(benchmark_vec, stock_ret$monthly.returns)
Beta <- covar / benchmark_variance
Alpha <- (stock_mean - juros - Beta * (benchmark_mean - juros)) * 100
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Results ####
tickers[2:length(tickers)]
benchmark_sharpe # average return in excess of risk-free rate
stock_sharpe # average return in excess of risk-free rate
Beta # volatility of a stock compared to the benchmark index
Alpha # excess returns above benchmark
library(quantmod)
tickers = c('^BVSP', 'CSNA3.SA', 'VALE3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
?getSymbols
library(xlsx)
write.xlsx(BVSP, file = getwd())
getwd()
write.xlsx(BVSP, file ="C:/Users/user/Google_Drive/2.Trading/Na/BVSP", )
write.xlsx(BVSP, file ="C:/Users/user/Google_Drive/2.Trading/Na/BVSP.xlsx", )
write.xlsx(CSNA3.SA, file ="C:/Users/user/Google_Drive/2.Trading/Na/CSNA3.SA.xlsx", )
write.xlsx(VALE3.SA, file ="C:/Users/user/Google_Drive/2.Trading/Na/VALE3.SA.xlsx", )
if(!is.null(dev.list())) dev.off() ## limpa plots
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Carrega Pacotes ####
if(!require(devtools)){install.packages("devtools");library(devtools)}
if(!require(quantmod)){install.packages("quantmod");library(quantmod)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(rbcb)){devtools::install_github("wilsonfreitas/rbcb");library(rbcb)}
#### MAGIC ####
## create the tickers
tickers = c('^BVSP', 'CSNA3.SA')
startDate <- "2016-01-01" # periodo de analise
endDate <- Sys.Date()
## downloading historical series
getSymbols(tickers, from = startDate, to = endDate, src = "yahoo")
## calculating benchmark return
stock_ret <- as.data.frame(monthlyReturn(CSNA3.SA))
benchmark_ret <- as.data.frame(monthlyReturn(BVSP))
## calculating ratios
juros <- as.data.frame(rbcb::get_series(c(11), last = 1, as = "xts"))[1,1]
sharpe <- function(mean, interest, stdev){
(mean - interest) / stdev
}
benchmark_mean <- mean(benchmark_ret$monthly.returns)
benchmark_variance <- var(benchmark_ret$monthly.returns)
benchmark_stdev <- sd(benchmark_ret$monthly.returns)
benchmark_sharpe <- sharpe(benchmark_mean, juros, benchmark_stdev)
stock_mean <- mean(stock_ret$monthly.returns)
stock_variance <- var(stock_ret$monthly.returns)
stock_stdev <- sd(stock_ret$monthly.returns)
stock_sharpe <- sharpe(stock_mean, juros, stock_stdev)
benchmark_vec <- benchmark_ret[1:nrow(stock_ret),]
covar <- cov(benchmark_vec, stock_ret$monthly.returns)
Beta <- (covar - benchmark_variance) / stock_sharpe
Alpha <- (stock_mean - juros - Beta * (benchmark_mean - juros)) * 100
#### limpeza ####
gc() ## limpa memória do PC
cat("\014") ## limpa console
#### Results ####
tickers[2:length(tickers)]
benchmark_sharpe # average return in excess of risk-free rate
stock_sharpe # average return in excess of risk-free rate
Beta # volatility of a stock compared to the benchmark index
Alpha # excess returns above benchmark
library(rbcb)
library(ribge)
library(quantmod)
library(GetTDData)
?download.TD.data
df.yield <- get.yield.curve()
str(df.yield)
View(df.yield)
dl.folder ='TD Files'
download.TD.data(asset.codes = NULL, dl.folder = dl.folder, n.dl = 1)
Tesouro_Direto <- read.TD.files(dl.folder = dl.folder, maturity =)
View(Tesouro_Direto)
library(rbcb)
library(ribge)
library(GetTDData)
#### carrega dados####
ipca <- as.data.frame(rbcb::get_series(c(IPCA = 433), last = 120, as = "xts"))
# ipca$periodo <- row.names(ipca)
pib <- as.data.frame(rbcb::get_series(c(PIB = 4385), last = 120, as = "xts"))
selic <- as.data.frame(rbcb::get_series(c(SELIC= 4390), last = 120, as = "xts"))
desemprego <- as.data.frame(rbcb::get_series(c(DESEMPREGO = 10777), last = 120, as = "xts"))
dados_econ <- as.data.frame(rbcb::get_series(c(IPCA = 433,
PIB = 4385,
SELIC= 4390,
DESEMPREGO = 10777,
), last = 120, as = "tibble"))
dados_econ$periodo <- row.names(dados_econ)
?get_series
dados_econ <- rbcb::get_series(c(IPCA = 433,
PIB = 4385,
SELIC= 4390,
DESEMPREGO = 10777,
), last = 120, as = "data.frame")
dados_econ$periodo <- row.names(dados_econ)
#### carrega dados####
dados_econ <- rbcb::get_series(c(IPCA = 433,
PIB = 4385,
SELIC= 4390,
DESEMPREGO = 10777,
), last = 120, as = "data.frame")
#### carrega dados####
dados_econ <- rbcb::get_series(c(IPCA = 433,
PIB = 4385,
SELIC= 4390,
DESEMPREGO = 10777
), last = 120, as = "data.frame")
View(dados_econ)
dados_econ[["IPCA"]]
#### carrega dados####
dados_econ <- rbcb::get_series(c(IPCA = 433,
PIB = 4385,
SELIC= 4390,
DESEMPREGO = 10777
), last = 120, as = "data.frame")
